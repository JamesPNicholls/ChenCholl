package com.example.itraveller;

import java.util.ArrayList;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import android.Manifest;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.IntentSender;
import android.content.pm.PackageManager;
import android.location.LocationManager;
import android.os.Build;
import android.os.Bundle;

import android.app.Activity;
import android.graphics.Color;
import android.os.Bundle;
import android.view.MenuItem;
import android.view.WindowManager;
import android.widget.ArrayAdapter;
import android.widget.AutoCompleteTextView;

//Widgets
import android.os.Looper;
import android.view.View;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.SeekBar;
import android.widget.TextView;
import android.widget.Toast;

//Location Services
import com.google.android.gms.common.api.ApiException;
import com.google.android.gms.common.api.ResolvableApiException;
import com.google.android.gms.location.LocationCallback;
import com.google.android.gms.location.LocationRequest;
import com.google.android.gms.location.LocationResult;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.location.LocationSettingsRequest;
import com.google.android.gms.location.LocationSettingsResponse;
import com.google.android.gms.location.LocationSettingsStatusCodes;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;

//Firebase
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
<<<<<<< HEAD
import com.google.android.material.slider.RangeSlider;
=======
import com.google.android.material.navigation.NavigationView;
>>>>>>> andrew_branch
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import org.w3c.dom.Text;




public class Hotels extends AppCompatActivity {

    private TextView addressText;
    private Button searchButton;
    private Button locationButton;
    private LocationRequest locationRequest;
    private ArrayList<String> hotelNames = new ArrayList<String>();
    private ArrayList<String> hotelRef   = new ArrayList<String>();
    private ArrayList<String[]> hotelLL  = new ArrayList<String[]>();
    private ArrayList<String> restTypes  = new ArrayList<String>();


    private FirebaseDatabase firebaseDatabase;
    private DatabaseReference databaseReference;

    private ImageButton b_korea;
    private ImageButton b_usa;
    private ImageButton b_australia;
    private ImageButton b_china;
    private ImageButton b_france;
    private ImageButton b_greece;
    private ImageButton b_india;
    private ImageButton b_italy;
    private ImageButton b_japan;
    private ImageButton b_mexico;
    private ImageButton b_montenegro;
    private ImageButton b_pakistan;
    private ImageButton b_portugal;
    private ImageButton b_spain;
    private ImageButton b_sweden;
    private ImageButton b_switzerland;
    private ImageButton b_thailand;
    private ImageButton b_ukraine;
    private ImageButton b_vietnam;
    private ImageButton b_philippines;

<<<<<<< HEAD
    TextView seekText;
    TextView seekTextV;
=======
    DrawerLayout drawerLayout;
    NavigationView navigationView;
    ActionBarDrawerToggle drawerToggle;

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {

        if(drawerToggle.onOptionsItemSelected(item)){
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
>>>>>>> andrew_branch

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_hotels);


        // get the instance of the Firebase database
        firebaseDatabase = FirebaseDatabase.getInstance();
        // get the reference to the JSON tree
        databaseReference = firebaseDatabase.getReference();


        Button LocationButton = findViewById(R.id.locationButton);
        Button SearchButton   = findViewById(R.id.searchButton);
        SeekBar seekBar = findViewById(R.id.seekBar);


        locationRequest = LocationRequest.create();
        locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
        locationRequest.setInterval(5000);
        locationRequest.setFastestInterval(2000);



        // Hotel name auto fill
        getHotelNames();

        // Autofill textview menu function
        ArrayAdapter<String> adapter = new ArrayAdapter<String>
                (this, android.R.layout.select_dialog_item, hotelNames);
        //Getting the instance of AutoCompleteTextView
        AutoCompleteTextView actv = (AutoCompleteTextView) findViewById(R.id.autoCompleteTextView);
        actv.setThreshold(1);//will start working from first character
        actv.setAdapter(adapter);//setting the adapter data into the AutoCompleteTextView
        actv.setTextColor(Color.BLACK);
        // Hotel name auto fill

<<<<<<< HEAD
        //Seekbar functionality
        seekBar.setOnSeekBarChangeListener(seekBarChangeListener);
        int progress = seekBar.getProgress();
        seekText = findViewById(R.id.seekText);
        seekTextV = findViewById(R.id.seekValue);
        seekText.setText("Search Radius(m):");
        seekTextV.setText(Integer.toString(progress));






=======
        drawerLayout = findViewById(R.id.drawer_layout);
        navigationView = findViewById(R.id.navView);
        drawerToggle = new ActionBarDrawerToggle(this,drawerLayout, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawerLayout.addDrawerListener(drawerToggle);
        drawerToggle.syncState();
        getSupportActionBar().setDisplayHomeAsUpEnabled(true);
        navigationView.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(@NonNull MenuItem item) {
                switch(item.getItemId())
                {
                    case R.id.home:{
                        Intent intent = new Intent(Hotels.this, Hotels.class);
                        startActivity(intent);
                        Toast.makeText(Hotels.this, "Home Selected", Toast.LENGTH_SHORT).show();
                    }
                    case R.id.logout:{
                        Intent intent = new Intent(getApplicationContext(), MainActivity.class);
                        startActivity(intent);
                        finish();
                        Toast.makeText(Hotels.this, "Logout Successful", Toast.LENGTH_SHORT).show();
                    }
                }
                return false;
            }
        });
>>>>>>> andrew_branch

        SearchButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent intent = new Intent(Hotels.this, activity_restaurants.class);
                String name     = actv.getText().toString();
                int index = hotelNames.indexOf(name);

                //check so see if a valid hotel name is selected
                if(index == -1) {
                    Toast.makeText(Hotels.this, "Please Select a Hotel...", Toast.LENGTH_SHORT).show();
                } else{
                    String[] ll = hotelLL.get(index);

                    intent.putExtra("hotel_name", name);
                    intent.putExtra("latLng",ll);
                    intent.putStringArrayListExtra("rest_list", restTypes);
                    intent.putExtra("hotel_ref", hotelRef.get(index));
                    intent.putExtra("search_radius", seekBar.getProgress());
                    startActivity(intent);
                }

            }
        });

        LocationButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                getCurrentLocation();
            }
        });

        // adding on clicks for all of the imagebuttons
        b_korea = (ImageButton) findViewById(R.id.korea);
        b_usa = (ImageButton) findViewById(R.id.usa);
        b_australia = (ImageButton) findViewById(R.id.australia);
        b_china = (ImageButton) findViewById(R.id.china);
        b_france = (ImageButton) findViewById(R.id.france);
        b_greece = (ImageButton) findViewById(R.id.greece);
        b_india = (ImageButton) findViewById(R.id.india);
        b_italy = (ImageButton) findViewById(R.id.italy);
        b_japan = (ImageButton) findViewById(R.id.japan);
        b_mexico = (ImageButton) findViewById(R.id.mexico);
        b_montenegro = (ImageButton) findViewById(R.id.montenegro);
        b_pakistan = (ImageButton) findViewById(R.id.pakistan);
        b_portugal = (ImageButton) findViewById(R.id.portugal);
        b_spain = (ImageButton) findViewById(R.id.spain);
        b_sweden = (ImageButton) findViewById(R.id.sweden);
        b_switzerland = (ImageButton) findViewById(R.id.switzerland);
        b_thailand = (ImageButton) findViewById(R.id.thailand);
        b_ukraine = (ImageButton) findViewById(R.id.ukraine);
        b_vietnam = (ImageButton) findViewById(R.id.vietnam);
        b_philippines = (ImageButton) findViewById(R.id.philippines);

       b_korea.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("korea")){
                    b_korea.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_korea.setBackgroundColor(getResources().getColor(R.color.grey));
                }
       }
       });
       b_usa.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("usa")){
                    b_usa.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_usa.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_australia.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("australia")){
                    b_australia.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_australia.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_china.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("china")){
                    b_china.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_china.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_france.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("france")){
                    b_france.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_france.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
        b_greece.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("greece")){
                    b_greece.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_greece.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_india.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("india")){
                    b_india.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_india.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_italy.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("italy")){
                    b_italy.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_italy.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_japan.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("japan")){
                    b_japan.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_japan.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_mexico.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("mexico")){
                    b_mexico.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_mexico.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_montenegro.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("montenegro")){
                    b_montenegro.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_montenegro.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_pakistan.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("pakistan")){
                    b_pakistan.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_pakistan.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_portugal.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("portugal")){
                    b_portugal.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_portugal.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_spain.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("spain")){
                    b_spain.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_spain.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_sweden.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("sweden")){
                    b_sweden.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_sweden.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_switzerland.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("switzerland")){
                    b_switzerland.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_switzerland.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_thailand.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("thailand")){
                    b_thailand.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_thailand.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
        b_ukraine.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("ukraine")){
                    b_ukraine.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_ukraine.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_vietnam.setOnClickListener(new View.OnClickListener() {
            @Override
           public void onClick(View view){
                if(addType("korea")){
                    b_vietnam.setBackgroundColor(getResources().getColor(R.color.purple_500));
                } else {
                    b_vietnam.setBackgroundColor(getResources().getColor(R.color.grey));
                }
        }
       });
       b_philippines.setOnClickListener(new View.OnClickListener() {
           @Override
           public void onClick(View view) {
               if(addType("philippines")){
                   b_philippines.setBackgroundColor(getResources().getColor(R.color.purple_500));
               } else {
                   b_philippines.setBackgroundColor(getResources().getColor(R.color.grey));
               }

           }
       });


    }

    SeekBar.OnSeekBarChangeListener seekBarChangeListener = new SeekBar.OnSeekBarChangeListener() {

        @Override
        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
            // updated continuously as the user slides the thumb
            if(progress < 1000)
            {
                seekText.setText("Search Radius(m):" );
                seekTextV.setText(Integer.toString(progress));
            }else{
                float km = (float) progress / 1000;
                seekText.setText("Search Radius(km):");
                seekTextV.setText(String.format("%.2f",km));
            }




        }

        @Override
        public void onStartTrackingTouch(SeekBar seekBar) {
            // called when the user first touches the SeekBar
        }

        @Override
        public void onStopTrackingTouch(SeekBar seekBar) {
            // called after the user finishes moving the SeekBar
        }
    };

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);

        if (requestCode == 1){
            if (grantResults[0] == PackageManager.PERMISSION_GRANTED){

                if (isGPSEnabled()) {

                    getCurrentLocation();

                }else {

                    turnOnGPS();
                }
            }
        }


    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == 2) {
            if (resultCode == Activity.RESULT_OK) {

                getCurrentLocation();
            }
        }
    }


    private void findHotelLocation() {
        databaseReference = firebaseDatabase.getReference();

        databaseReference.child("hotels").addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                AutoCompleteTextView actv = (AutoCompleteTextView) findViewById(R.id.autoCompleteTextView);

                String name = actv.getText().toString();

                for( DataSnapshot s : snapshot.getChildren()) {
                    if (s.child("name").getValue().toString().equals(name)) {
                        addressText.setText(s.child("address").getValue().toString());
                        break;
                    }
                }
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {

            }
        });
    }




    private void getCurrentLocation() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            if (ActivityCompat.checkSelfPermission(Hotels.this, Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {

                if (isGPSEnabled()) {

                    LocationServices.getFusedLocationProviderClient(Hotels.this)
                            .requestLocationUpdates(locationRequest, new LocationCallback() {
                                @Override
                                public void onLocationResult(@NonNull LocationResult locationResult) {
                                    super.onLocationResult(locationResult);

                                    LocationServices.getFusedLocationProviderClient(Hotels.this)
                                            .removeLocationUpdates(this);

                                    if (locationResult != null && locationResult.getLocations().size() >0){

                                        int index = locationResult.getLocations().size() - 1;
                                        double latitude = locationResult.getLocations().get(index).getLatitude();
                                        double longitude = locationResult.getLocations().get(index).getLongitude();

                                        addressText.setText("Latitude: "+ latitude + "\n" + "Longitude: "+ longitude);
                                    }
                                }
                            }, Looper.getMainLooper());

                } else {
                    turnOnGPS();
                }

            } else {
                requestPermissions(new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
            }
        }
    }

    private void turnOnGPS() {
        LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder()
                .addLocationRequest(locationRequest);
        builder.setAlwaysShow(true);

        Task<LocationSettingsResponse> result = LocationServices.getSettingsClient(getApplicationContext())
                .checkLocationSettings(builder.build());

        result.addOnCompleteListener(new OnCompleteListener<LocationSettingsResponse>() {
            @Override
            public void onComplete(@NonNull Task<LocationSettingsResponse> task) {

                try {
                    LocationSettingsResponse response = task.getResult(ApiException.class);
                    Toast.makeText(Hotels.this, "GPS is already tured on", Toast.LENGTH_SHORT).show();

                } catch (ApiException e) {

                    switch (e.getStatusCode()) {
                        case LocationSettingsStatusCodes.RESOLUTION_REQUIRED:

                            try {
                                ResolvableApiException resolvableApiException = (ResolvableApiException) e;
                                resolvableApiException.startResolutionForResult(Hotels.this, 2);
                            } catch (IntentSender.SendIntentException ex) {
                                ex.printStackTrace();
                            }
                            break;

                        case LocationSettingsStatusCodes.SETTINGS_CHANGE_UNAVAILABLE:
                            //Device does not have location
                            break;
                    }
                }
            }
        });

    }

    private boolean isGPSEnabled() {
        LocationManager locationManager = null;
        boolean isEnabled = false;

        if (locationManager == null) {
            locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        }

        isEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
        return isEnabled;

    }

    private void getHotelNames() {
        // get the reference to the JSON tree
        databaseReference = firebaseDatabase.getReference();

        // add a value event listener to the Users node
        databaseReference.child("hotels").addListenerForSingleValueEvent(new ValueEventListener() {
            // called to read a static snapshot of the contents at a given path
            @Override
            public void onDataChange(DataSnapshot dataSnapshot) {
                for (DataSnapshot snapshot : dataSnapshot.getChildren()) {

                    //gets the name and lat,long of hotels to send later
                    String name = snapshot.child("name").getValue(String.class);
                    String lat  = (snapshot.child("location").child("lat").getValue(float.class)).toString();
                    String lng  = (snapshot.child("location").child("lng").getValue(float.class)).toString();
                    String hotRef = snapshot.child("picture").getValue(String.class);
                    String[] data = {lat, lng};
                    hotelNames.add(name);
                    hotelLL.add( data);
                    hotelRef.add(hotRef);

                }
            }

            // called when the client doesn't have permission to access the data
            @Override
            public void onCancelled(DatabaseError databaseError) {
                Toast.makeText(Hotels.this, "Database Unavailable", Toast.LENGTH_SHORT).show();
            }
        });
    }

    private boolean addType(String type){
        //Checks to see if the type of food as already been added, and attempts to remove it
        for(String s : restTypes){
            if(s.equals(type)){
                restTypes.remove(restTypes.indexOf(type));
                return false;
            }
        }
        restTypes.add(type);
        return true;
    }


    @Override
    public void onBackPressed(){
        if(drawerLayout.isDrawerOpen(GravityCompat.START))
        {
            drawerLayout.closeDrawer(GravityCompat.START);
        }
        else{
            super.onBackPressed();
        }
    }
}